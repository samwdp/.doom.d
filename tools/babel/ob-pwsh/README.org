* ~ob-pwsh~
  :PROPERTIES:
  :version:  0.1
  :header-args: :exports both :eval no-export
  :END:

  Org for powershell core! I wrote it!

  Based on [[https://github.com/xchrishawk/ob-racket][=xchrishawk='s ~ob-racket~ plugin]]

  Fair warning - this is super raw

** Version
   #+begin_src emacs-lisp
     (org-entry-get nil "version" t)
   #+end_src

   #+RESULTS:
   : 0.1

** Simple code block running powershell (via a global dotnet core ~pwsh~)

   #+begin_src pwsh
 Get-Location | foreach { "A path: " + $_.Path }
   #+end_src

   #+RESULTS:
   : A path: /Users/gmauer/code/ob-powershell

** Powershell is fantastically self documenting
   For this next bit, I'd want to use ~echo~. But I want to avoid bashisms for the purpose of this demo. I know it's an alias in powershell, so let's look that up

   #+begin_src pwsh
 get-alias echo
   #+end_src

   #+RESULTS:
   #+begin_example

   CommandType     Name                                               Version    S
                                                                                 o
                                                                                 u
                                                                                 r
                                                                                 c
                                                                                 e
   -----------     ----                                               -------    -
   Alias           echo -> Write-Output

   #+end_example

   Pretty cool huh? Now we can use ~Write-Output~ in the future.

** Oh hold on, what's that? It supports variables? Oh shit!

   Yup, variables. Here's a value:

   #+NAME: foo-val
   987

   And we can reference it by name in this code block

   #+NAME: foo-string
   #+begin_src pwsh :var foo=foo-val :results output
   Write-Output "A foo value, larries and gentlemen: $foo"
   #+end_src

   #+RESULTS: foo-string
   : A foo value, larries and gentlemen: 987


** Cross language harmonizing barbershop quartet

   #+NAME: divide-it
   #+begin_src pwsh :var numerator=14
   return $numerator / 7
   #+end_src

   And now I can use the results of that function in this python code block with the ~:var division_result=divide-it(numerator=213)~ header arg
   #+begin_src  python :results output :var division_result=divide-it(numerator=213) :var another_num=foo-val
     print(f'{division_result} + {another_num} is {division_result + another_num}')
   #+end_src

   #+RESULTS:
   : 30.4285714285714
   :  +   987
   :  is 30.4285714285714
   :   987
   :

* Inclusion
  Add to load path so tha we can require this
  #+begin_src emacs-lisp
    (add-to-list 'load-path "/Users/gmauer/code/ob-powershell/src/")
  #+end_src

  And load it
  #+begin_src emacs-lisp
    (load-file 'ob-pwsh)
  #+end_src

  #+RESULTS:
  : ob-pwsh

  And now its loaded, you can go run the above.

  The default powershell command run is

  #+begin_src emacs-lisp
    org-babel-pwsh-command
  #+end_src

  #+RESULTS:
  : pwsh

  If you installed this correctly the above should display something like ="pwsh"=.

  You should make sure its installed in a location visible to the default shell, or you can set it to another value.

* Work In Progress
** TODO =Ctrl-C Ctrl-C= Code inderect buffer thingy isn't working
   It thinks that there is something called =pwsh-mode= but there isn't, it's =powershell-mode=
** TODO Sessions
   This will require digging into how eg ob-python works
** TODO Post it to org mailing list
** TODO Melpa package
** TODO Inclusion in spacemacs powershell layer
** TODO Ok, this is dumb but my html exports is broken. Some error that might have to do with parinfer?
** TODO Better return object format
   Rather than outputting strings, convert powershell objects returned as =value= to elisp structures to take advantage of the fact tha we have a runtime
